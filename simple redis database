# coding:utf-8


import redis
import datetime


class Database:
    def __init__(self):
        self.host = "localhost"
        self.port = 6379
        self.write_pool = {}   # key/value
        self.read_pool = []

    def write(self, website, city, year, month, day, deal_number):
        try:
            # create the key
            key = "_".join([website, city,str(year), str(month), str(day)])
            val = deal_number
            r = redis.StrictRedis(host=self.host, port=self.port)
            r.set(key, val)
        except Exception as e:
            print(e)

    def add_write(self, website, city, year, month, day, deal_number):
        key = "_".join([website, city, str(year), str(month), str(day)])
        val = deal_number
        self.write_pool[key] = val

    def bach_write(self):
        try:
            r = redis.StrictRedis(host=self.host, port=self.port)
            r.mset(self.write_pool)
        except Exception as exx:
            print(exx)

    def read(self, website, city, year, month, day):
        try:
            key = "_".join([website, city, str(year), str(month), str(day)])
            r = redis.StrictRedis(host=self.host, port=self.port)
            value = r.get(key)
            print(value)
            return value
        except Exception as ex:
            print(ex)

    def add_read(self, website, city, year, month, day):
            key = "_".join([website, city, str(year), str(month), str(day)])
            self.read_pool.append(key)

    def bath_read(self):
        try:
            r = redis.StrictRedis(host=self.host, port=self.port)
            val = r.mget(self.read_pool)
            print(len(val))
            print('\n')
            print(val)
            return val
        except Exception as nn:
            print(nn)

    @staticmethod
    def single_write():
        beg = datetime.datetime.now()
        db = Database()
        for i in range(1, 101):
            db.write('meituan', 'beijing', i, 9, 1, i)
        end = datetime.datetime.now()
        print(end-beg)

    @staticmethod
    def batch_write():
        beg = datetime.datetime.now()
        db = Database()
        for i in range(1, 500001):
            db.add_write("meituan", 'beijing', i, 9, 1, i)
        db.bach_write()
        end = datetime.datetime.now()
        print(end - beg)

    @staticmethod
    def single_read():
        beg = datetime.datetime.now()
        db = Database()
        for i in range(1, 101):
            db.read("meituan", 'beijing', i, 9, 1)
        end = datetime.datetime.now()
        print(end - beg)

    @staticmethod
    def batch_read():
        try:
            beg = datetime.datetime.now()
            db = Database()
            for i in range(1, 500001):
                db.add_read("meituan", 'beijing', i, 9, 1)
            db.bath_read()
            end = datetime.datetime.now()
            print(end - beg)
        except Exception as hh:
            print(hh)


if __name__ == '__main__':
    mm = Database()
    mm.batch_write()
    mm.batch_read()
